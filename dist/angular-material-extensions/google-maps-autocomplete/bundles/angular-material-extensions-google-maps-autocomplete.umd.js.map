{"version":3,"file":"angular-material-extensions-google-maps-autocomplete.umd.js","sources":["ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/address-validator/mat-address-validator.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/helpers/parser.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/animations/index.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/mat-google-maps-autocomplete.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/mat-google-maps-autocomplete.module.ts"],"sourcesContent":["import {Directive, EventEmitter, forwardRef} from '@angular/core';\r\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\r\nimport PlaceResult = google.maps.places.PlaceResult;\r\n\r\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\r\n\r\n@Directive({\r\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\r\n  providers: [\r\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\r\n  ]\r\n})\r\nexport class MatValidateAddressDirective implements Validator {\r\n\r\n  public subscription: any;\r\n\r\n  private _address: PlaceResult;\r\n\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public validate(): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | any => {\r\n      return this.address ? null : {\r\n        validateAddress: {\r\n          valid: false\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  public subscribe(eventEmitter: EventEmitter<any>) {\r\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\r\n      this.address = address;\r\n    });\r\n  }\r\n\r\n  public unsubscribe() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  get address() {\r\n    return this._address;\r\n  }\r\n\r\n  set address(value) {\r\n    this._address = value;\r\n  }\r\n}\r\n","import {Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\r\nimport {MapsAPILoader} from '@agm/core';\r\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\r\nimport {Location} from '../interfaces/location.interface';\r\nimport {GermanAddress} from '../interfaces';\r\nimport PlaceResult = google.maps.places.PlaceResult;\r\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\r\n\r\nexport enum Appearance {\r\n  STANDARD = 'standard',\r\n  FILL = 'fill',\r\n  OUTLINE = 'outline',\r\n  LEGACY = 'legacy',\r\n}\r\n\r\n@Component({\r\n  selector: 'mat-google-maps-autocomplete',\r\n  exportAs: 'matGoogleMapsAutocomplete',\r\n  templateUrl: './mat-google-maps-autocomplete.component.html',\r\n  styleUrls: ['./mat-google-maps-autocomplete.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MatGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\r\n\r\n  @ViewChild('search')\r\n  public searchElementRef: ElementRef;\r\n\r\n  @Input()\r\n  addressLabelText = 'Address';\r\n\r\n  @Input()\r\n  placeholderText = 'Please enter the address';\r\n\r\n  @Input()\r\n  requiredErrorText = 'The address is required';\r\n\r\n  @Input()\r\n  invalidErrorText = 'The address is not valid';\r\n\r\n  @Input()\r\n  appearance: string | Appearance = Appearance.STANDARD;\r\n\r\n  @Input()\r\n  value: PlaceResult;\r\n\r\n  @Input()\r\n  address: PlaceResult | string;\r\n\r\n  @Input()\r\n  country: string | string[];\r\n\r\n  @Input()\r\n  placeIdOnly?: boolean;\r\n\r\n  @Input()\r\n  strictBounds?: boolean;\r\n\r\n  @Input()\r\n  types?: string[];\r\n  // types: string[] = ['address'];\r\n\r\n  @Input()\r\n  type?: string;\r\n\r\n  @Input()\r\n  autoCompleteOptions: AutocompleteOptions = {};\r\n\r\n  @Output()\r\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\r\n\r\n  @Output()\r\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\r\n\r\n  @Output()\r\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\r\n\r\n  @Output()\r\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\r\n\r\n\r\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\r\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\r\n\r\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\r\n    Validators.required,\r\n    this.addressValidator.validate()])\r\n  );\r\n\r\n  propagateChange = (_: any) => {\r\n  };\r\n\r\n  constructor(private mapsAPILoader: MapsAPILoader,\r\n              private ngZone: NgZone) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.addressValidator.subscribe(this.onNewPlaceResult);\r\n\r\n    const options: AutocompleteOptions = {\r\n      // types: ['address'],\r\n      // componentRestrictions: {country: this.country},\r\n      placeIdOnly: this.placeIdOnly,\r\n      strictBounds: this.strictBounds,\r\n      // types: this.types,\r\n      type: this.type\r\n    };\r\n\r\n    // tslint:disable-next-line:no-unused-expression\r\n    this.country ? options.componentRestrictions = {country: this.country} : null;\r\n    // tslint:disable-next-line:no-unused-expression\r\n    this.country ? options.types = this.types : null;\r\n\r\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\r\n    this.initGoogleMapsAutocomplete();\r\n  }\r\n\r\n  public initGoogleMapsAutocomplete() {\r\n    this.mapsAPILoader\r\n      .load()\r\n      .then(() => {\r\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\r\n        autocomplete.addListener('place_changed', () => {\r\n          this.ngZone.run(() => {\r\n            // get the place result\r\n            const place: PlaceResult = autocomplete.getPlace();\r\n\r\n            const germanAddress: GermanAddress = {\r\n              gmID: place.id,\r\n              icon: place.icon,\r\n              url: place.url,\r\n              placeID: place.place_id,\r\n              displayAddress: place.formatted_address,\r\n              name: place.name,\r\n              vicinity: place.vicinity,\r\n              locality: {},\r\n              state: {},\r\n              country: {},\r\n              geoLocation: {latitude: -1, longitude: -1},\r\n            };\r\n\r\n            if (place.geometry && place.geometry.location) {\r\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\r\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\r\n            }\r\n\r\n            place.address_components.forEach(value => {\r\n              if (value.types.indexOf('street_number') > -1) {\r\n                germanAddress.streetNumber = value.short_name;\r\n              }\r\n              if (value.types.indexOf('route') > -1) {\r\n                germanAddress.streetName = value.long_name;\r\n              }\r\n              if (value.types.indexOf('postal_code') > -1) {\r\n                germanAddress.postalCode = Number(value.short_name);\r\n              }\r\n              if (value.types.indexOf('sublocality') > -1) {\r\n                germanAddress.sublocality = value.long_name;\r\n              }\r\n              if (value.types.indexOf('locality') > -1) {\r\n                germanAddress.locality.long = value.long_name;\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\r\n                germanAddress.state.long = value.long_name;\r\n                germanAddress.state.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('country') > -1) {\r\n                germanAddress.country.long = value.long_name;\r\n                germanAddress.country.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n            });\r\n\r\n            this.onGermanAddressMapped.emit(germanAddress);\r\n\r\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\r\n              // place result is not valid\r\n              return;\r\n            } else {\r\n              // show dialog to select a address from the input\r\n              // emit failed event\r\n              this.value = place;\r\n              this.propagateChange(this.value)\r\n            }\r\n            this.address = place.formatted_address;\r\n            this.onAutocompleteSelected.emit(place);\r\n            // console.log('onAutocompleteSelected -> ', place);\r\n            this.onLocationSelected.emit(\r\n              {\r\n                latitude: place.geometry.location.lat(),\r\n                longitude: place.geometry.location.lng()\r\n              });\r\n          });\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  public onQuery(event: any) {\r\n    // console.log('onChange()', event);\r\n    this.onChange.emit(this.address);\r\n  }\r\n\r\n  private resetAddress() {\r\n    this.address = null;\r\n    this.addressSearchControl.updateValueAndValidity();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (obj) {\r\n      this.value = obj;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n}\r\n","import PlaceResult = google.maps.places.PlaceResult;\r\nimport {GermanAddress} from '../interfaces';\r\n\r\nexport function parseGermanAddress(placeResult: PlaceResult): GermanAddress {\r\n  const germanAddress: GermanAddress = {\r\n    gmID: placeResult.id,\r\n    icon: placeResult.icon,\r\n    url: placeResult.url,\r\n    placeID: placeResult.place_id,\r\n    displayAddress: placeResult.formatted_address,\r\n    name: placeResult.name,\r\n    vicinity: placeResult.vicinity,\r\n    locality: {},\r\n    state: {},\r\n    country: {},\r\n    geoLocation: {latitude: -1, longitude: -1},\r\n  };\r\n\r\n  if (placeResult.geometry && placeResult.geometry.location) {\r\n    germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\r\n    germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\r\n  }\r\n\r\n  if (placeResult.address_components && placeResult.address_components.length > 0) {\r\n    placeResult.address_components.forEach(value => {\r\n      if (value.types.indexOf('street_number') > -1) {\r\n        germanAddress.streetNumber = value.short_name;\r\n      }\r\n      if (value.types.indexOf('route') > -1) {\r\n        germanAddress.streetName = value.long_name;\r\n      }\r\n      if (value.types.indexOf('postal_code') > -1) {\r\n        germanAddress.postalCode = Number(value.short_name);\r\n      }\r\n      if (value.types.indexOf('sublocality') > -1) {\r\n        germanAddress.sublocality = value.long_name;\r\n      }\r\n      if (value.types.indexOf('locality') > -1) {\r\n        germanAddress.locality.long = value.long_name;\r\n        germanAddress.locality.short = value.short_name;\r\n      }\r\n      if (value.types.indexOf('administrative_area_level_1') > -1) {\r\n        germanAddress.state.long = value.long_name;\r\n        germanAddress.state.short = value.short_name;\r\n      }\r\n      if (value.types.indexOf('country') > -1) {\r\n        germanAddress.country.long = value.long_name;\r\n        germanAddress.country.short = value.short_name;\r\n      }\r\n      if (value.types.indexOf('administrative_area_level_3') > -1) {\r\n        germanAddress.locality.short = value.short_name;\r\n      }\r\n    });\r\n  }\r\n  return germanAddress;\r\n}\r\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\r\n\r\nconst customAnimation = animation(\r\n  [\r\n    style({\r\n      opacity: '{{opacity}}',\r\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\r\n    }),\r\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\r\n  ],\r\n  {\r\n    params: {\r\n      duration: '200ms',\r\n      delay: '0ms',\r\n      opacity: '0',\r\n      scale: '1',\r\n      x: '0',\r\n      y: '0',\r\n      z: '0'\r\n    }\r\n  }\r\n);\r\n\r\nexport const InputAnimations = [\r\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\r\n\r\n  trigger('animateStagger', [\r\n    state('50', style('*')),\r\n    state('100', style('*')),\r\n    state('200', style('*')),\r\n\r\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\r\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\r\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\r\n  ]),\r\n];\r\n","import {Component, EventEmitter, forwardRef, Input, OnInit, Output} from '@angular/core';\r\nimport {ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\r\n\r\nimport {parseGermanAddress} from '../../helpers/parser';\r\nimport {GermanAddress} from '../../interfaces';\r\nimport {Appearance} from '../mat-google-maps-autocomplete.component';\r\nimport {InputAnimations} from '../../animations';\r\n\r\n@Component({\r\n  selector: 'mat-search-google-maps-autocomplete',\r\n  templateUrl: './mat-search-google-maps-autocomplete.component.html',\r\n  styleUrls: ['./mat-search-google-maps-autocomplete.component.scss'],\r\n  animations: InputAnimations,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MatSearchGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\r\n\r\n  @Input()\r\n  appearance: string | Appearance = Appearance.STANDARD;\r\n\r\n  @Input()\r\n  searchAddressLabel = 'Search Address';\r\n\r\n  @Input()\r\n  streetNameLabel = 'Street';\r\n\r\n  @Input()\r\n  streetNumberLabel = 'Nr.';\r\n\r\n  @Input()\r\n  postalCodeLabel = 'PLZ';\r\n\r\n  @Input()\r\n  localityLabel = 'Locality';\r\n\r\n  @Input()\r\n  vicinityLabel = 'Vicinity';\r\n\r\n  @Input()\r\n  showVicinity: boolean;\r\n\r\n  @Input()\r\n  country: string | string[];\r\n\r\n  @Input()\r\n  placeIdOnly?: boolean;\r\n\r\n  @Input()\r\n  strictBounds?: boolean;\r\n\r\n  @Input()\r\n  types?: string[];\r\n  // types: string[] = ['address'];\r\n\r\n  @Input()\r\n  type?: string;\r\n\r\n  @Input()\r\n  readonly: boolean;\r\n\r\n  @Input()\r\n  disableSearch: boolean;\r\n\r\n  @Input()\r\n  value: GermanAddress;\r\n\r\n  @Output()\r\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\r\n\r\n  germanAddress: GermanAddress;\r\n  addressFormGroup: FormGroup;\r\n\r\n  firstInit = true;\r\n\r\n  propagateChange = (_: any) => {\r\n  };\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.createAddressFormGroup();\r\n  }\r\n\r\n  createAddressFormGroup(): void {\r\n    this.addressFormGroup = this.formBuilder.group({\r\n      streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],\r\n      streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],\r\n      postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],\r\n      vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],\r\n      locality: this.formBuilder.group({\r\n        long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],\r\n      }),\r\n    });\r\n  }\r\n\r\n  syncAutoComplete($event: google.maps.places.PlaceResult) {\r\n    if (this.germanAddress) {\r\n      this.addressFormGroup.reset();\r\n    }\r\n    const germanAddress: GermanAddress = parseGermanAddress($event);\r\n    this.germanAddress = germanAddress;\r\n    if (germanAddress.vicinity) {\r\n      this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity);\r\n    }\r\n    if (germanAddress.streetName) {\r\n      this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName);\r\n    }\r\n    if (germanAddress.streetNumber) {\r\n      this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString());\r\n    }\r\n    if (germanAddress.postalCode) {\r\n      this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode);\r\n    }\r\n    if (germanAddress.locality && germanAddress.locality.long) {\r\n      this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long);\r\n    }\r\n\r\n    this.value = germanAddress;\r\n    this.propagateChange(this.value);\r\n    this.onGermanAddressMapped.emit(germanAddress);\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    let shouldRecreateFG = false;\r\n    if (obj) {\r\n      if (!this.value && this.firstInit) {\r\n        shouldRecreateFG = true;\r\n      }\r\n      this.value = obj;\r\n      this.propagateChange(this.value);\r\n      if (shouldRecreateFG) {\r\n        this.createAddressFormGroup();\r\n        this.firstInit = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n  }\r\n\r\n}\r\n","import {Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\r\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\r\nimport {MapsAPILoader} from '@agm/core';\r\nimport {Location} from '../interfaces/location.interface';\r\nimport {isPlatformBrowser} from '@angular/common';\r\nimport {GermanAddress} from '../interfaces/germand.address.interface';\r\nimport PlaceResult = google.maps.places.PlaceResult;\r\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\r\n\r\n@Directive({\r\n  selector: '[matGoogleMapsAutocomplete]',\r\n  exportAs: 'matGoogleMapsAutocomplete',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MatGoogleMapsAutocompleteDirective implements OnInit, ControlValueAccessor {\r\n\r\n  @Input()\r\n  address: PlaceResult | string;\r\n\r\n  @Input()\r\n  country: string | string[];\r\n\r\n  @Input()\r\n  placeIdOnly?: boolean;\r\n\r\n  @Input()\r\n  strictBounds?: boolean;\r\n\r\n  @Input()\r\n  types?: string[];\r\n\r\n  @Input()\r\n  type?: string;\r\n\r\n  @Input()\r\n  autoCompleteOptions: AutocompleteOptions = {};\r\n\r\n  @Output()\r\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\r\n\r\n  @Output()\r\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\r\n\r\n  @Output()\r\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\r\n\r\n  @Output()\r\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\r\n\r\n  value: PlaceResult;\r\n\r\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\r\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\r\n\r\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\r\n    Validators.required,\r\n    this.addressValidator.validate()])\r\n  );\r\n\r\n  propagateChange = (_: any) => {\r\n  };\r\n\r\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\r\n              public elemRef: ElementRef,\r\n              public mapsAPILoader: MapsAPILoader,\r\n              private ngZone: NgZone) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.addressValidator.subscribe(this.onNewPlaceResult);\r\n      const options: AutocompleteOptions = {\r\n        // types: ['address'],\r\n        // componentRestrictions: {country: this.country},\r\n        placeIdOnly: this.placeIdOnly,\r\n        strictBounds: this.strictBounds,\r\n        // types: this.types,\r\n        type: this.type\r\n      };\r\n\r\n      // tslint:disable-next-line:no-unused-expression\r\n      this.country ? options.componentRestrictions = {country: this.country} : null;\r\n      // tslint:disable-next-line:no-unused-expression\r\n      this.country ? options.types = this.types : null;\r\n\r\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\r\n      this.initGoogleMapsAutocomplete();\r\n    }\r\n\r\n  }\r\n\r\n  public initGoogleMapsAutocomplete() {\r\n    this.mapsAPILoader\r\n      .load()\r\n      .then(() => {\r\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\r\n        autocomplete.addListener('place_changed', () => {\r\n          this.ngZone.run(() => {\r\n            // get the place result\r\n            const place: PlaceResult = autocomplete.getPlace();\r\n\r\n            const germanAddress: GermanAddress = {\r\n              gmID: place.id,\r\n              icon: place.icon,\r\n              url: place.url,\r\n              placeID: place.place_id,\r\n              displayAddress: place.formatted_address,\r\n              name: place.name,\r\n              vicinity: place.vicinity,\r\n              locality: {},\r\n              state: {},\r\n              country: {},\r\n              geoLocation: {latitude: -1, longitude: -1},\r\n            };\r\n\r\n            if (place.geometry && place.geometry.location) {\r\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\r\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\r\n            }\r\n\r\n            place.address_components.forEach(value => {\r\n              if (value.types.indexOf('street_number') > -1) {\r\n                germanAddress.streetNumber = value.short_name;\r\n              }\r\n              if (value.types.indexOf('route') > -1) {\r\n                germanAddress.streetName = value.long_name;\r\n              }\r\n              if (value.types.indexOf('postal_code') > -1) {\r\n                germanAddress.postalCode = Number(value.short_name);\r\n              }\r\n              if (value.types.indexOf('sublocality') > -1) {\r\n                germanAddress.sublocality = value.long_name;\r\n              }\r\n              if (value.types.indexOf('locality') > -1) {\r\n                germanAddress.locality.long = value.long_name;\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\r\n                germanAddress.state.long = value.long_name;\r\n                germanAddress.state.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('country') > -1) {\r\n                germanAddress.country.long = value.long_name;\r\n                germanAddress.country.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n            });\r\n\r\n            this.onGermanAddressMapped.emit(germanAddress);\r\n\r\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\r\n              // place result is not valid\r\n              return;\r\n            } else {\r\n              // show dialog to select a address from the input\r\n              // emit failed event\r\n              this.value = place;\r\n              this.propagateChange(this.value)\r\n            }\r\n            this.address = place.formatted_address;\r\n            this.onAutocompleteSelected.emit(place);\r\n            this.onLocationSelected.emit(\r\n              {\r\n                latitude: place.geometry.location.lat(),\r\n                longitude: place.geometry.location.lng()\r\n              });\r\n          });\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (obj) {\r\n      this.value = obj;\r\n    }\r\n  }\r\n\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {FlexLayoutModule} from '@angular/flex-layout';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\r\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\r\nimport {MatGoogleMapsAutocompleteComponent} from './component/mat-google-maps-autocomplete.component';\r\n// tslint:disable-next-line:max-line-length\r\nimport {MatSearchGoogleMapsAutocompleteComponent} from './component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';\r\n\r\n\r\n@NgModule({\r\n  imports:\r\n    [\r\n      CommonModule,\r\n      FormsModule,\r\n      ReactiveFormsModule,\r\n      FlexLayoutModule,\r\n      MatInputModule,\r\n      MatIconModule\r\n    ],\r\n  exports: [\r\n    MatGoogleMapsAutocompleteComponent,\r\n    MatGoogleMapsAutocompleteDirective,\r\n    MatValidateAddressDirective,\r\n    MatSearchGoogleMapsAutocompleteComponent\r\n  ],\r\n  declarations: [\r\n    MatGoogleMapsAutocompleteComponent,\r\n    MatGoogleMapsAutocompleteDirective,\r\n    MatValidateAddressDirective,\r\n    MatSearchGoogleMapsAutocompleteComponent\r\n  ]\r\n})\r\nexport class MatGoogleMapsAutocompleteModule {\r\n}\r\n"],"names":["Directive","NG_VALIDATORS","forwardRef","Appearance","EventEmitter","FormControl","Validators","MapsAPILoader","NgZone","Component","NG_VALUE_ACCESSOR","ViewChild","Input","Output","animation","style","animate","trigger","transition","useAnimation","state","query","stagger","animateChild","FormBuilder","isPlatformBrowser","Inject","PLATFORM_ID","ElementRef","NgModule","CommonModule","FormsModule","ReactiveFormsModule","FlexLayoutModule","MatInputModule","MatIconModule"],"mappings":"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"}