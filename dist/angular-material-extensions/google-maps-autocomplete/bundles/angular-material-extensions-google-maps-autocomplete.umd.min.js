!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@agm/core"),require("@angular/animations"),require("@angular/common"),require("@angular/flex-layout"),require("@angular/material/icon"),require("@angular/material/input")):"function"==typeof define&&define.amd?define("@angular-material-extensions/google-maps-autocomplete",["exports","@angular/core","@angular/forms","@agm/core","@angular/animations","@angular/common","@angular/flex-layout","@angular/material/icon","@angular/material/input"],t):t(((e=e||self)["angular-material-extensions"]=e["angular-material-extensions"]||{},e["angular-material-extensions"]["google-maps-autocomplete"]={}),e.ng.core,e.ng.forms,e.core$1,e.ng.animations,e.ng.common,e.ng.flexLayout,e.ng.material.icon,e.ng.material.input)}(this,(function(e,t,r,a,o,n,i,s,l){"use strict";var p,u=function(){function e(){}return e.prototype.validate=function(){var e=this;return function(t){return e.address?null:{validateAddress:{valid:!1}}}},e.prototype.subscribe=function(e){var t=this;this.subscription=e.subscribe((function(e){t.address=e}))},e.prototype.unsubscribe=function(){this.subscription.unsubscribe()},Object.defineProperty(e.prototype,"address",{get:function(){return this._address},set:function(e){this._address=e},enumerable:!1,configurable:!0}),e.decorators=[{type:t.Directive,args:[{selector:"[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]",providers:[{provide:r.NG_VALIDATORS,useExisting:t.forwardRef((function(){return e})),multi:!0}]}]}],e.ctorParameters=function(){return[]},e}();(p=e.Appearance||(e.Appearance={})).STANDARD="standard",p.FILL="fill",p.OUTLINE="outline",p.LEGACY="legacy";var d=function(){function o(a,o){this.mapsAPILoader=a,this.ngZone=o,this.addressLabelText="Address",this.placeholderText="Please enter the address",this.requiredErrorText="The address is required",this.invalidErrorText="The address is not valid",this.appearance=e.Appearance.STANDARD,this.autoCompleteOptions={},this.onChange=new t.EventEmitter,this.onAutocompleteSelected=new t.EventEmitter,this.onGermanAddressMapped=new t.EventEmitter,this.onLocationSelected=new t.EventEmitter,this.onNewPlaceResult=new t.EventEmitter,this.addressValidator=new u,this.addressSearchControl=new r.FormControl({value:null},r.Validators.compose([r.Validators.required,this.addressValidator.validate()])),this.propagateChange=function(e){}}return o.prototype.ngOnInit=function(){this.addressValidator.subscribe(this.onNewPlaceResult);var e={placeIdOnly:this.placeIdOnly,strictBounds:this.strictBounds,type:this.type};this.country&&(e.componentRestrictions={country:this.country}),this.country&&(e.types=this.types),this.autoCompleteOptions=Object.assign(this.autoCompleteOptions,e),this.initGoogleMapsAutocomplete()},o.prototype.initGoogleMapsAutocomplete=function(){var e=this;this.mapsAPILoader.load().then((function(){var t=new google.maps.places.Autocomplete(e.searchElementRef.nativeElement,e.autoCompleteOptions);t.addListener("place_changed",(function(){e.ngZone.run((function(){var r=t.getPlace(),a={gmID:r.id,icon:r.icon,url:r.url,placeID:r.place_id,displayAddress:r.formatted_address,name:r.name,vicinity:r.vicinity,locality:{},state:{},country:{},geoLocation:{latitude:-1,longitude:-1}};r.geometry&&r.geometry.location&&(a.geoLocation.latitude=r.geometry.location.lat(),a.geoLocation.longitude=r.geometry.location.lng()),r.address_components.forEach((function(e){e.types.indexOf("street_number")>-1&&(a.streetNumber=e.short_name),e.types.indexOf("route")>-1&&(a.streetName=e.long_name),e.types.indexOf("postal_code")>-1&&(a.postalCode=Number(e.short_name)),e.types.indexOf("sublocality")>-1&&(a.sublocality=e.long_name),e.types.indexOf("locality")>-1&&(a.locality.long=e.long_name,a.locality.short=e.short_name),e.types.indexOf("administrative_area_level_1")>-1&&(a.state.long=e.long_name,a.state.short=e.short_name),e.types.indexOf("country")>-1&&(a.country.long=e.long_name,a.country.short=e.short_name),e.types.indexOf("administrative_area_level_3")>-1&&(a.locality.short=e.short_name)})),e.onGermanAddressMapped.emit(a),r.place_id&&void 0!==r.geometry&&null!==r.geometry&&(e.value=r,e.propagateChange(e.value),e.address=r.formatted_address,e.onAutocompleteSelected.emit(r),e.onLocationSelected.emit({latitude:r.geometry.location.lat(),longitude:r.geometry.location.lng()}))}))}))})).catch((function(e){return console.log(e)}))},o.prototype.onQuery=function(e){this.onChange.emit(this.address)},o.prototype.resetAddress=function(){this.address=null,this.addressSearchControl.updateValueAndValidity()},o.prototype.writeValue=function(e){e&&(this.value=e)},o.prototype.registerOnChange=function(e){this.propagateChange=e},o.prototype.registerOnTouched=function(e){throw new Error("Method not implemented.")},o.prototype.setDisabledState=function(e){throw new Error("Method not implemented.")},o.ctorParameters=function(){return[{type:a.MapsAPILoader},{type:t.NgZone}]},o.decorators=[{type:t.Component,args:[{selector:"mat-google-maps-autocomplete",exportAs:"matGoogleMapsAutocomplete",template:'<mat-form-field class="full-width" [appearance]="appearance">\r\n  <mat-label>{{addressLabelText}}</mat-label>\r\n  <input matInput\r\n         [(ngModel)]="address"\r\n         (change)="onQuery($event)"\r\n         placeholder="{{placeholderText}}"\r\n         class="form-control"\r\n         #search\r\n         MatValidateAddress\r\n         required>\r\n  <mat-error *ngIf="addressSearchControl.hasError(\'required\')">\r\n    {{requiredErrorText}}\r\n  </mat-error>\r\n  <mat-error *ngIf="addressSearchControl.hasError(\'validateAddress\')">\r\n    {{invalidErrorText}}\r\n  </mat-error>\r\n</mat-form-field>\r\n',providers:[{provide:r.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return o})),multi:!0}],styles:[".full-width{width:100%}"]}]}],o.ctorParameters=function(){return[{type:a.MapsAPILoader},{type:t.NgZone}]},o.propDecorators={searchElementRef:[{type:t.ViewChild,args:["search"]}],addressLabelText:[{type:t.Input}],placeholderText:[{type:t.Input}],requiredErrorText:[{type:t.Input}],invalidErrorText:[{type:t.Input}],appearance:[{type:t.Input}],value:[{type:t.Input}],address:[{type:t.Input}],country:[{type:t.Input}],placeIdOnly:[{type:t.Input}],strictBounds:[{type:t.Input}],types:[{type:t.Input}],type:[{type:t.Input}],autoCompleteOptions:[{type:t.Input}],onChange:[{type:t.Output}],onAutocompleteSelected:[{type:t.Output}],onGermanAddressMapped:[{type:t.Output}],onLocationSelected:[{type:t.Output}]},o}();var c=o.animation([o.style({opacity:"{{opacity}}",transform:"scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})"}),o.animate("{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)",o.style("*"))],{params:{duration:"200ms",delay:"0ms",opacity:"0",scale:"1",x:"0",y:"0",z:"0"}}),m=[o.trigger("animate",[o.transition("void => *",[o.useAnimation(c)])]),o.trigger("animateStagger",[o.state("50",o.style("*")),o.state("100",o.style("*")),o.state("200",o.style("*")),o.transition("void => 50",o.query("@*",[o.stagger("50ms",[o.animateChild()])],{optional:!0})),o.transition("void => 100",o.query("@*",[o.stagger("100ms",[o.animateChild()])],{optional:!0})),o.transition("void => 200",o.query("@*",[o.stagger("200ms",[o.animateChild()])],{optional:!0}))])],y=function(){function a(r){this.formBuilder=r,this.appearance=e.Appearance.STANDARD,this.searchAddressLabel="Search Address",this.streetNameLabel="Street",this.streetNumberLabel="Nr.",this.postalCodeLabel="PLZ",this.localityLabel="Locality",this.vicinityLabel="Vicinity",this.onGermanAddressMapped=new t.EventEmitter,this.firstInit=!0,this.propagateChange=function(e){}}return a.prototype.ngOnInit=function(){this.createAddressFormGroup()},a.prototype.createAddressFormGroup=function(){this.addressFormGroup=this.formBuilder.group({streetName:[this.value&&this.value.streetName?this.value.streetName:null,r.Validators.required],streetNumber:[this.value&&this.value.streetNumber?this.value.streetNumber:null,r.Validators.required],postalCode:[this.value&&this.value.postalCode?this.value.postalCode:null,r.Validators.required],vicinity:[this.value&&this.value.vicinity?this.value.vicinity:null],locality:this.formBuilder.group({long:[this.value&&this.value.locality&&this.value.locality.long?this.value.locality.long:null,r.Validators.required]})})},a.prototype.syncAutoComplete=function(e){this.germanAddress&&this.addressFormGroup.reset();var t=function(e){var t={gmID:e.id,icon:e.icon,url:e.url,placeID:e.place_id,displayAddress:e.formatted_address,name:e.name,vicinity:e.vicinity,locality:{},state:{},country:{},geoLocation:{latitude:-1,longitude:-1}};return e.geometry&&e.geometry.location&&(t.geoLocation.latitude=e.geometry.location.lat(),t.geoLocation.longitude=e.geometry.location.lng()),e.address_components&&e.address_components.length>0&&e.address_components.forEach((function(e){e.types.indexOf("street_number")>-1&&(t.streetNumber=e.short_name),e.types.indexOf("route")>-1&&(t.streetName=e.long_name),e.types.indexOf("postal_code")>-1&&(t.postalCode=Number(e.short_name)),e.types.indexOf("sublocality")>-1&&(t.sublocality=e.long_name),e.types.indexOf("locality")>-1&&(t.locality.long=e.long_name,t.locality.short=e.short_name),e.types.indexOf("administrative_area_level_1")>-1&&(t.state.long=e.long_name,t.state.short=e.short_name),e.types.indexOf("country")>-1&&(t.country.long=e.long_name,t.country.short=e.short_name),e.types.indexOf("administrative_area_level_3")>-1&&(t.locality.short=e.short_name)})),t}(e);this.germanAddress=t,t.vicinity&&this.addressFormGroup.get("vicinity").patchValue(t.vicinity),t.streetName&&this.addressFormGroup.get("streetName").patchValue(t.streetName),t.streetNumber&&this.addressFormGroup.get("streetNumber").patchValue(t.streetNumber.toString()),t.postalCode&&this.addressFormGroup.get("postalCode").patchValue(t.postalCode),t.locality&&t.locality.long&&this.addressFormGroup.get("locality.long").patchValue(t.locality.long),this.value=t,this.propagateChange(this.value),this.onGermanAddressMapped.emit(t)},a.prototype.writeValue=function(e){var t=!1;e&&(!this.value&&this.firstInit&&(t=!0),this.value=e,this.propagateChange(this.value),t&&(this.createAddressFormGroup(),this.firstInit=!1))},a.prototype.registerOnChange=function(e){this.propagateChange=e},a.prototype.registerOnTouched=function(e){},a.prototype.setDisabledState=function(e){},a.ctorParameters=function(){return[{type:r.FormBuilder}]},a.decorators=[{type:t.Component,args:[{selector:"mat-search-google-maps-autocomplete",template:'<div fxLayout="column">\r\n  <div *ngIf="!disableSearch" fxFlex="100">\r\n    \x3c!--search address--\x3e\r\n    <mat-form-field fxFlex="auto" [appearance]="appearance" [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\r\n      <mat-label>{{searchAddressLabel}}</mat-label>\r\n      <input\r\n        (onAutocompleteSelected)="syncAutoComplete($event)"\r\n        [country]="country"\r\n        [placeIdOnly]="placeIdOnly"\r\n        [strictBounds]="strictBounds"\r\n        [types]="types"\r\n        [type]="type"\r\n        matGoogleMapsAutocomplete\r\n        matInput\r\n        required\r\n      />\r\n      <mat-icon color="primary" matSuffix>search</mat-icon>\r\n      \x3c!--    <mat-error>{{ \'msa.contactData.currentAddress.error\' | translate }}</mat-error>--\x3e\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <form [formGroup]="addressFormGroup" fxFlex fxLayoutGap="10px">\r\n    <div fxLayout="row" fxLayoutGap="10px">\r\n      <mat-form-field fxFlex="80"\r\n                      [appearance]="appearance"\r\n                      [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\r\n        <mat-label>{{streetNameLabel}}</mat-label>\r\n        <input\r\n          [readonly]="readonly"\r\n          formControlName="streetName"\r\n          matInput\r\n          required\r\n        />\r\n        \x3c!--        <mat-icon color="primary" matSuffix>add_location</mat-icon>--\x3e\r\n        \x3c!--    <mat-error>{{ \'msa.contactData.currentAddress.error\' | translate }}</mat-error>--\x3e\r\n      </mat-form-field>\r\n      <mat-form-field fxFlex="20" [appearance]="appearance" [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\r\n        <mat-label>{{streetNumberLabel}}</mat-label>\r\n        <input\r\n          [readonly]="readonly"\r\n          formControlName="streetNumber"\r\n          matInput\r\n          required\r\n        />\r\n        \x3c!--        <mat-icon color="primary" matSuffix>add_location</mat-icon>--\x3e\r\n        \x3c!--    <mat-error>{{ \'msa.contactData.currentAddress.error\' | translate }}</mat-error>--\x3e\r\n      </mat-form-field>\r\n    </div>\r\n    <div fxLayout="row" fxLayoutGap="10px">\r\n      <mat-form-field fxFlex="20" [appearance]="appearance" [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\r\n        <mat-label>{{postalCodeLabel}}</mat-label>\r\n        <input\r\n          [readonly]="readonly"\r\n          formControlName="postalCode"\r\n          matInput\r\n          required\r\n        />\r\n        \x3c!--        <mat-icon color="primary" matSuffix>add_location</mat-icon>--\x3e\r\n        \x3c!--    <mat-error>{{ \'msa.contactData.currentAddress.error\' | translate }}</mat-error>--\x3e\r\n      </mat-form-field>\r\n      <mat-form-field *ngIf="showVicinity" fxFlex="auto"\r\n                      [appearance]="appearance"\r\n                      [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\r\n        <mat-label>{{vicinityLabel}}</mat-label>\r\n        <input\r\n          [readonly]="readonly"\r\n          matInput\r\n          formControlName="vicinity"\r\n        />\r\n      </mat-form-field>\r\n      <div formGroupName="locality" fxFlex="auto">\r\n        <mat-form-field fxFlex="auto" [appearance]="appearance" [@animate]="{ value: \'*\', params: { y: \'100%\' } }">\r\n          <mat-label>{{localityLabel}}</mat-label>\r\n          <input\r\n            [readonly]="readonly"\r\n            formControlName="long"\r\n            matInput\r\n            required\r\n          />\r\n          <mat-icon color="primary" matSuffix>add_location</mat-icon>\r\n          \x3c!--    <mat-error>{{ \'msa.contactData.currentAddress.error\' | translate }}</mat-error>--\x3e\r\n        </mat-form-field>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n',animations:m,providers:[{provide:r.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return a})),multi:!0}],styles:[""]}]}],a.ctorParameters=function(){return[{type:r.FormBuilder}]},a.propDecorators={appearance:[{type:t.Input}],searchAddressLabel:[{type:t.Input}],streetNameLabel:[{type:t.Input}],streetNumberLabel:[{type:t.Input}],postalCodeLabel:[{type:t.Input}],localityLabel:[{type:t.Input}],vicinityLabel:[{type:t.Input}],showVicinity:[{type:t.Input}],country:[{type:t.Input}],placeIdOnly:[{type:t.Input}],strictBounds:[{type:t.Input}],types:[{type:t.Input}],type:[{type:t.Input}],readonly:[{type:t.Input}],disableSearch:[{type:t.Input}],value:[{type:t.Input}],onGermanAddressMapped:[{type:t.Output}]},a}(),h=function(){function e(e,a,o,n){this.platformId=e,this.elemRef=a,this.mapsAPILoader=o,this.ngZone=n,this.autoCompleteOptions={},this.onChange=new t.EventEmitter,this.onAutocompleteSelected=new t.EventEmitter,this.onGermanAddressMapped=new t.EventEmitter,this.onLocationSelected=new t.EventEmitter,this.onNewPlaceResult=new t.EventEmitter,this.addressValidator=new u,this.addressSearchControl=new r.FormControl({value:null},r.Validators.compose([r.Validators.required,this.addressValidator.validate()])),this.propagateChange=function(e){}}return e.prototype.ngOnInit=function(){if(n.isPlatformBrowser(this.platformId)){this.addressValidator.subscribe(this.onNewPlaceResult);var e={placeIdOnly:this.placeIdOnly,strictBounds:this.strictBounds,type:this.type};this.country&&(e.componentRestrictions={country:this.country}),this.country&&(e.types=this.types),this.autoCompleteOptions=Object.assign(this.autoCompleteOptions,e),this.initGoogleMapsAutocomplete()}},e.prototype.initGoogleMapsAutocomplete=function(){var e=this;this.mapsAPILoader.load().then((function(){var t=new google.maps.places.Autocomplete(e.elemRef.nativeElement,e.autoCompleteOptions);t.addListener("place_changed",(function(){e.ngZone.run((function(){var r=t.getPlace(),a={gmID:r.id,icon:r.icon,url:r.url,placeID:r.place_id,displayAddress:r.formatted_address,name:r.name,vicinity:r.vicinity,locality:{},state:{},country:{},geoLocation:{latitude:-1,longitude:-1}};r.geometry&&r.geometry.location&&(a.geoLocation.latitude=r.geometry.location.lat(),a.geoLocation.longitude=r.geometry.location.lng()),r.address_components.forEach((function(e){e.types.indexOf("street_number")>-1&&(a.streetNumber=e.short_name),e.types.indexOf("route")>-1&&(a.streetName=e.long_name),e.types.indexOf("postal_code")>-1&&(a.postalCode=Number(e.short_name)),e.types.indexOf("sublocality")>-1&&(a.sublocality=e.long_name),e.types.indexOf("locality")>-1&&(a.locality.long=e.long_name,a.locality.short=e.short_name),e.types.indexOf("administrative_area_level_1")>-1&&(a.state.long=e.long_name,a.state.short=e.short_name),e.types.indexOf("country")>-1&&(a.country.long=e.long_name,a.country.short=e.short_name),e.types.indexOf("administrative_area_level_3")>-1&&(a.locality.short=e.short_name)})),e.onGermanAddressMapped.emit(a),r.place_id&&void 0!==r.geometry&&null!==r.geometry&&(e.value=r,e.propagateChange(e.value),e.address=r.formatted_address,e.onAutocompleteSelected.emit(r),e.onLocationSelected.emit({latitude:r.geometry.location.lat(),longitude:r.geometry.location.lng()}))}))}))})).catch((function(e){return console.log(e)}))},e.prototype.registerOnChange=function(e){this.propagateChange=e},e.prototype.registerOnTouched=function(e){},e.prototype.setDisabledState=function(e){},e.prototype.writeValue=function(e){e&&(this.value=e)},e.ctorParameters=function(){return[{type:String,decorators:[{type:t.Inject,args:[t.PLATFORM_ID]}]},{type:t.ElementRef},{type:a.MapsAPILoader},{type:t.NgZone}]},e.decorators=[{type:t.Directive,args:[{selector:"[matGoogleMapsAutocomplete]",exportAs:"matGoogleMapsAutocomplete",providers:[{provide:r.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return e})),multi:!0}]}]}],e.ctorParameters=function(){return[{type:String,decorators:[{type:t.Inject,args:[t.PLATFORM_ID]}]},{type:t.ElementRef},{type:a.MapsAPILoader},{type:t.NgZone}]},e.propDecorators={address:[{type:t.Input}],country:[{type:t.Input}],placeIdOnly:[{type:t.Input}],strictBounds:[{type:t.Input}],types:[{type:t.Input}],type:[{type:t.Input}],autoCompleteOptions:[{type:t.Input}],onChange:[{type:t.Output}],onAutocompleteSelected:[{type:t.Output}],onGermanAddressMapped:[{type:t.Output}],onLocationSelected:[{type:t.Output}]},e}(),g=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[n.CommonModule,r.FormsModule,r.ReactiveFormsModule,i.FlexLayoutModule,l.MatInputModule,s.MatIconModule],exports:[d,h,u,y],declarations:[d,h,u,y]}]}],e}();e.MatGoogleMapsAutocompleteComponent=d,e.MatGoogleMapsAutocompleteDirective=h,e.MatGoogleMapsAutocompleteModule=g,e.MatSearchGoogleMapsAutocompleteComponent=y,e.MatValidateAddressDirective=u,e.ɵa=d,e.ɵb=y,e.ɵc=m,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=angular-material-extensions-google-maps-autocomplete.umd.min.js.map