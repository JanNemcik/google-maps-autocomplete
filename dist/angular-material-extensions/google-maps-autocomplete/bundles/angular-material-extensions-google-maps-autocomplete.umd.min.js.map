{"version":3,"sources":["ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/address-validator/mat-address-validator.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/animations/index.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/helpers/parser.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/mat-google-maps-autocomplete.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/mat-google-maps-autocomplete.module.ts"],"names":["Appearance","MatValidateAddressDirective","prototype","validate","_this","this","control","address","validateAddress","valid","subscribe","eventEmitter","subscription","unsubscribe","Object","defineProperty","_address","value","Directive","args","selector","providers","provide","NG_VALIDATORS","useExisting","forwardRef","multi","MatGoogleMapsAutocompleteComponent","mapsAPILoader","ngZone","addressLabelText","placeholderText","requiredErrorText","invalidErrorText","appearance","STANDARD","autoCompleteOptions","onChange","EventEmitter","onAutocompleteSelected","onGermanAddressMapped","onLocationSelected","onNewPlaceResult","addressValidator","addressSearchControl","FormControl","Validators","compose","required","propagateChange","_","ngOnInit","options","placeIdOnly","strictBounds","type","country","componentRestrictions","types","assign","initGoogleMapsAutocomplete","load","then","autocomplete","google","maps","places","Autocomplete","searchElementRef","nativeElement","addListener","run","place","getPlace","germanAddress","gmID","id","icon","url","placeID","place_id","displayAddress","formatted_address","name","vicinity","locality","state","geoLocation","latitude","longitude","geometry","location","lat","lng","address_components","forEach","indexOf","streetNumber","short_name","streetName","long_name","postalCode","Number","sublocality","long","short","emit","undefined","catch","err","console","log","onQuery","event","resetAddress","updateValueAndValidity","writeValue","obj","registerOnChange","fn","registerOnTouched","Error","setDisabledState","isDisabled","MapsAPILoader","NgZone","Component","exportAs","template","NG_VALUE_ACCESSOR","ViewChild","Input","Output","customAnimation","animation","style","opacity","transform","animate","params","duration","delay","scale","x","y","z","InputAnimations","trigger","transition","useAnimation","query","stagger","animateChild","optional","MatSearchGoogleMapsAutocompleteComponent","formBuilder","searchAddressLabel","streetNameLabel","streetNumberLabel","postalCodeLabel","localityLabel","vicinityLabel","firstInit","createAddressFormGroup","addressFormGroup","group","syncAutoComplete","$event","reset","placeResult","length","parseGermanAddress","get","patchValue","toString","shouldRecreateFG","FormBuilder","animations","MatGoogleMapsAutocompleteDirective","platformId","elemRef","isPlatformBrowser","Inject","PLATFORM_ID","ElementRef","MatGoogleMapsAutocompleteModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","FlexLayoutModule","MatInputModule","MatIconModule","exports","declarations"],"mappings":"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","sourcesContent":["import {Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\r\nimport {MapsAPILoader} from '@agm/core';\r\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\r\nimport {Location} from '../interfaces/location.interface';\r\nimport {GermanAddress} from '../interfaces';\r\nimport PlaceResult = google.maps.places.PlaceResult;\r\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\r\n\r\nexport enum Appearance {\r\n  STANDARD = 'standard',\r\n  FILL = 'fill',\r\n  OUTLINE = 'outline',\r\n  LEGACY = 'legacy',\r\n}\r\n\r\n@Component({\r\n  selector: 'mat-google-maps-autocomplete',\r\n  exportAs: 'matGoogleMapsAutocomplete',\r\n  templateUrl: './mat-google-maps-autocomplete.component.html',\r\n  styleUrls: ['./mat-google-maps-autocomplete.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MatGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\r\n\r\n  @ViewChild('search')\r\n  public searchElementRef: ElementRef;\r\n\r\n  @Input()\r\n  addressLabelText = 'Address';\r\n\r\n  @Input()\r\n  placeholderText = 'Please enter the address';\r\n\r\n  @Input()\r\n  requiredErrorText = 'The address is required';\r\n\r\n  @Input()\r\n  invalidErrorText = 'The address is not valid';\r\n\r\n  @Input()\r\n  appearance: string | Appearance = Appearance.STANDARD;\r\n\r\n  @Input()\r\n  value: PlaceResult;\r\n\r\n  @Input()\r\n  address: PlaceResult | string;\r\n\r\n  @Input()\r\n  country: string | string[];\r\n\r\n  @Input()\r\n  placeIdOnly?: boolean;\r\n\r\n  @Input()\r\n  strictBounds?: boolean;\r\n\r\n  @Input()\r\n  types?: string[];\r\n  // types: string[] = ['address'];\r\n\r\n  @Input()\r\n  type?: string;\r\n\r\n  @Input()\r\n  autoCompleteOptions: AutocompleteOptions = {};\r\n\r\n  @Output()\r\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\r\n\r\n  @Output()\r\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\r\n\r\n  @Output()\r\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\r\n\r\n  @Output()\r\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\r\n\r\n\r\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\r\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\r\n\r\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\r\n    Validators.required,\r\n    this.addressValidator.validate()])\r\n  );\r\n\r\n  propagateChange = (_: any) => {\r\n  };\r\n\r\n  constructor(private mapsAPILoader: MapsAPILoader,\r\n              private ngZone: NgZone) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.addressValidator.subscribe(this.onNewPlaceResult);\r\n\r\n    const options: AutocompleteOptions = {\r\n      // types: ['address'],\r\n      // componentRestrictions: {country: this.country},\r\n      placeIdOnly: this.placeIdOnly,\r\n      strictBounds: this.strictBounds,\r\n      // types: this.types,\r\n      type: this.type\r\n    };\r\n\r\n    // tslint:disable-next-line:no-unused-expression\r\n    this.country ? options.componentRestrictions = {country: this.country} : null;\r\n    // tslint:disable-next-line:no-unused-expression\r\n    this.country ? options.types = this.types : null;\r\n\r\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\r\n    this.initGoogleMapsAutocomplete();\r\n  }\r\n\r\n  public initGoogleMapsAutocomplete() {\r\n    this.mapsAPILoader\r\n      .load()\r\n      .then(() => {\r\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\r\n        autocomplete.addListener('place_changed', () => {\r\n          this.ngZone.run(() => {\r\n            // get the place result\r\n            const place: PlaceResult = autocomplete.getPlace();\r\n\r\n            const germanAddress: GermanAddress = {\r\n              gmID: place.id,\r\n              icon: place.icon,\r\n              url: place.url,\r\n              placeID: place.place_id,\r\n              displayAddress: place.formatted_address,\r\n              name: place.name,\r\n              vicinity: place.vicinity,\r\n              locality: {},\r\n              state: {},\r\n              country: {},\r\n              geoLocation: {latitude: -1, longitude: -1},\r\n            };\r\n\r\n            if (place.geometry && place.geometry.location) {\r\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\r\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\r\n            }\r\n\r\n            place.address_components.forEach(value => {\r\n              if (value.types.indexOf('street_number') > -1) {\r\n                germanAddress.streetNumber = value.short_name;\r\n              }\r\n              if (value.types.indexOf('route') > -1) {\r\n                germanAddress.streetName = value.long_name;\r\n              }\r\n              if (value.types.indexOf('postal_code') > -1) {\r\n                germanAddress.postalCode = Number(value.short_name);\r\n              }\r\n              if (value.types.indexOf('sublocality') > -1) {\r\n                germanAddress.sublocality = value.long_name;\r\n              }\r\n              if (value.types.indexOf('locality') > -1) {\r\n                germanAddress.locality.long = value.long_name;\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\r\n                germanAddress.state.long = value.long_name;\r\n                germanAddress.state.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('country') > -1) {\r\n                germanAddress.country.long = value.long_name;\r\n                germanAddress.country.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n            });\r\n\r\n            this.onGermanAddressMapped.emit(germanAddress);\r\n\r\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\r\n              // place result is not valid\r\n              return;\r\n            } else {\r\n              // show dialog to select a address from the input\r\n              // emit failed event\r\n              this.value = place;\r\n              this.propagateChange(this.value)\r\n            }\r\n            this.address = place.formatted_address;\r\n            this.onAutocompleteSelected.emit(place);\r\n            // console.log('onAutocompleteSelected -> ', place);\r\n            this.onLocationSelected.emit(\r\n              {\r\n                latitude: place.geometry.location.lat(),\r\n                longitude: place.geometry.location.lng()\r\n              });\r\n          });\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  public onQuery(event: any) {\r\n    // console.log('onChange()', event);\r\n    this.onChange.emit(this.address);\r\n  }\r\n\r\n  private resetAddress() {\r\n    this.address = null;\r\n    this.addressSearchControl.updateValueAndValidity();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (obj) {\r\n      this.value = obj;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n}\r\n","import {Directive, EventEmitter, forwardRef} from '@angular/core';\r\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\r\nimport PlaceResult = google.maps.places.PlaceResult;\r\n\r\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\r\n\r\n@Directive({\r\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\r\n  providers: [\r\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\r\n  ]\r\n})\r\nexport class MatValidateAddressDirective implements Validator {\r\n\r\n  public subscription: any;\r\n\r\n  private _address: PlaceResult;\r\n\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public validate(): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | any => {\r\n      return this.address ? null : {\r\n        validateAddress: {\r\n          valid: false\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  public subscribe(eventEmitter: EventEmitter<any>) {\r\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\r\n      this.address = address;\r\n    });\r\n  }\r\n\r\n  public unsubscribe() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  get address() {\r\n    return this._address;\r\n  }\r\n\r\n  set address(value) {\r\n    this._address = value;\r\n  }\r\n}\r\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\r\n\r\nconst customAnimation = animation(\r\n  [\r\n    style({\r\n      opacity: '{{opacity}}',\r\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\r\n    }),\r\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\r\n  ],\r\n  {\r\n    params: {\r\n      duration: '200ms',\r\n      delay: '0ms',\r\n      opacity: '0',\r\n      scale: '1',\r\n      x: '0',\r\n      y: '0',\r\n      z: '0'\r\n    }\r\n  }\r\n);\r\n\r\nexport const InputAnimations = [\r\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\r\n\r\n  trigger('animateStagger', [\r\n    state('50', style('*')),\r\n    state('100', style('*')),\r\n    state('200', style('*')),\r\n\r\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\r\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\r\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\r\n  ]),\r\n];\r\n","import {Component, EventEmitter, forwardRef, Input, OnInit, Output} from '@angular/core';\r\nimport {ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\r\n\r\nimport {parseGermanAddress} from '../../helpers/parser';\r\nimport {GermanAddress} from '../../interfaces';\r\nimport {Appearance} from '../mat-google-maps-autocomplete.component';\r\nimport {InputAnimations} from '../../animations';\r\n\r\n@Component({\r\n  selector: 'mat-search-google-maps-autocomplete',\r\n  templateUrl: './mat-search-google-maps-autocomplete.component.html',\r\n  styleUrls: ['./mat-search-google-maps-autocomplete.component.scss'],\r\n  animations: InputAnimations,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MatSearchGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\r\n\r\n  @Input()\r\n  appearance: string | Appearance = Appearance.STANDARD;\r\n\r\n  @Input()\r\n  searchAddressLabel = 'Search Address';\r\n\r\n  @Input()\r\n  streetNameLabel = 'Street';\r\n\r\n  @Input()\r\n  streetNumberLabel = 'Nr.';\r\n\r\n  @Input()\r\n  postalCodeLabel = 'PLZ';\r\n\r\n  @Input()\r\n  localityLabel = 'Locality';\r\n\r\n  @Input()\r\n  vicinityLabel = 'Vicinity';\r\n\r\n  @Input()\r\n  showVicinity: boolean;\r\n\r\n  @Input()\r\n  country: string | string[];\r\n\r\n  @Input()\r\n  placeIdOnly?: boolean;\r\n\r\n  @Input()\r\n  strictBounds?: boolean;\r\n\r\n  @Input()\r\n  types?: string[];\r\n  // types: string[] = ['address'];\r\n\r\n  @Input()\r\n  type?: string;\r\n\r\n  @Input()\r\n  readonly: boolean;\r\n\r\n  @Input()\r\n  disableSearch: boolean;\r\n\r\n  @Input()\r\n  value: GermanAddress;\r\n\r\n  @Output()\r\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\r\n\r\n  germanAddress: GermanAddress;\r\n  addressFormGroup: FormGroup;\r\n\r\n  firstInit = true;\r\n\r\n  propagateChange = (_: any) => {\r\n  };\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.createAddressFormGroup();\r\n  }\r\n\r\n  createAddressFormGroup(): void {\r\n    this.addressFormGroup = this.formBuilder.group({\r\n      streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],\r\n      streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],\r\n      postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],\r\n      vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],\r\n      locality: this.formBuilder.group({\r\n        long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],\r\n      }),\r\n    });\r\n  }\r\n\r\n  syncAutoComplete($event: google.maps.places.PlaceResult) {\r\n    if (this.germanAddress) {\r\n      this.addressFormGroup.reset();\r\n    }\r\n    const germanAddress: GermanAddress = parseGermanAddress($event);\r\n    this.germanAddress = germanAddress;\r\n    if (germanAddress.vicinity) {\r\n      this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity);\r\n    }\r\n    if (germanAddress.streetName) {\r\n      this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName);\r\n    }\r\n    if (germanAddress.streetNumber) {\r\n      this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString());\r\n    }\r\n    if (germanAddress.postalCode) {\r\n      this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode);\r\n    }\r\n    if (germanAddress.locality && germanAddress.locality.long) {\r\n      this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long);\r\n    }\r\n\r\n    this.value = germanAddress;\r\n    this.propagateChange(this.value);\r\n    this.onGermanAddressMapped.emit(germanAddress);\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    let shouldRecreateFG = false;\r\n    if (obj) {\r\n      if (!this.value && this.firstInit) {\r\n        shouldRecreateFG = true;\r\n      }\r\n      this.value = obj;\r\n      this.propagateChange(this.value);\r\n      if (shouldRecreateFG) {\r\n        this.createAddressFormGroup();\r\n        this.firstInit = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n  }\r\n\r\n}\r\n","import PlaceResult = google.maps.places.PlaceResult;\r\nimport {GermanAddress} from '../interfaces';\r\n\r\nexport function parseGermanAddress(placeResult: PlaceResult): GermanAddress {\r\n  const germanAddress: GermanAddress = {\r\n    gmID: placeResult.id,\r\n    icon: placeResult.icon,\r\n    url: placeResult.url,\r\n    placeID: placeResult.place_id,\r\n    displayAddress: placeResult.formatted_address,\r\n    name: placeResult.name,\r\n    vicinity: placeResult.vicinity,\r\n    locality: {},\r\n    state: {},\r\n    country: {},\r\n    geoLocation: {latitude: -1, longitude: -1},\r\n  };\r\n\r\n  if (placeResult.geometry && placeResult.geometry.location) {\r\n    germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\r\n    germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\r\n  }\r\n\r\n  if (placeResult.address_components && placeResult.address_components.length > 0) {\r\n    placeResult.address_components.forEach(value => {\r\n      if (value.types.indexOf('street_number') > -1) {\r\n        germanAddress.streetNumber = value.short_name;\r\n      }\r\n      if (value.types.indexOf('route') > -1) {\r\n        germanAddress.streetName = value.long_name;\r\n      }\r\n      if (value.types.indexOf('postal_code') > -1) {\r\n        germanAddress.postalCode = Number(value.short_name);\r\n      }\r\n      if (value.types.indexOf('sublocality') > -1) {\r\n        germanAddress.sublocality = value.long_name;\r\n      }\r\n      if (value.types.indexOf('locality') > -1) {\r\n        germanAddress.locality.long = value.long_name;\r\n        germanAddress.locality.short = value.short_name;\r\n      }\r\n      if (value.types.indexOf('administrative_area_level_1') > -1) {\r\n        germanAddress.state.long = value.long_name;\r\n        germanAddress.state.short = value.short_name;\r\n      }\r\n      if (value.types.indexOf('country') > -1) {\r\n        germanAddress.country.long = value.long_name;\r\n        germanAddress.country.short = value.short_name;\r\n      }\r\n      if (value.types.indexOf('administrative_area_level_3') > -1) {\r\n        germanAddress.locality.short = value.short_name;\r\n      }\r\n    });\r\n  }\r\n  return germanAddress;\r\n}\r\n","import {Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\r\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\r\nimport {MapsAPILoader} from '@agm/core';\r\nimport {Location} from '../interfaces/location.interface';\r\nimport {isPlatformBrowser} from '@angular/common';\r\nimport {GermanAddress} from '../interfaces/germand.address.interface';\r\nimport PlaceResult = google.maps.places.PlaceResult;\r\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\r\n\r\n@Directive({\r\n  selector: '[matGoogleMapsAutocomplete]',\r\n  exportAs: 'matGoogleMapsAutocomplete',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MatGoogleMapsAutocompleteDirective implements OnInit, ControlValueAccessor {\r\n\r\n  @Input()\r\n  address: PlaceResult | string;\r\n\r\n  @Input()\r\n  country: string | string[];\r\n\r\n  @Input()\r\n  placeIdOnly?: boolean;\r\n\r\n  @Input()\r\n  strictBounds?: boolean;\r\n\r\n  @Input()\r\n  types?: string[];\r\n\r\n  @Input()\r\n  type?: string;\r\n\r\n  @Input()\r\n  autoCompleteOptions: AutocompleteOptions = {};\r\n\r\n  @Output()\r\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\r\n\r\n  @Output()\r\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\r\n\r\n  @Output()\r\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\r\n\r\n  @Output()\r\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\r\n\r\n  value: PlaceResult;\r\n\r\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\r\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\r\n\r\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\r\n    Validators.required,\r\n    this.addressValidator.validate()])\r\n  );\r\n\r\n  propagateChange = (_: any) => {\r\n  };\r\n\r\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\r\n              public elemRef: ElementRef,\r\n              public mapsAPILoader: MapsAPILoader,\r\n              private ngZone: NgZone) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.addressValidator.subscribe(this.onNewPlaceResult);\r\n      const options: AutocompleteOptions = {\r\n        // types: ['address'],\r\n        // componentRestrictions: {country: this.country},\r\n        placeIdOnly: this.placeIdOnly,\r\n        strictBounds: this.strictBounds,\r\n        // types: this.types,\r\n        type: this.type\r\n      };\r\n\r\n      // tslint:disable-next-line:no-unused-expression\r\n      this.country ? options.componentRestrictions = {country: this.country} : null;\r\n      // tslint:disable-next-line:no-unused-expression\r\n      this.country ? options.types = this.types : null;\r\n\r\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\r\n      this.initGoogleMapsAutocomplete();\r\n    }\r\n\r\n  }\r\n\r\n  public initGoogleMapsAutocomplete() {\r\n    this.mapsAPILoader\r\n      .load()\r\n      .then(() => {\r\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\r\n        autocomplete.addListener('place_changed', () => {\r\n          this.ngZone.run(() => {\r\n            // get the place result\r\n            const place: PlaceResult = autocomplete.getPlace();\r\n\r\n            const germanAddress: GermanAddress = {\r\n              gmID: place.id,\r\n              icon: place.icon,\r\n              url: place.url,\r\n              placeID: place.place_id,\r\n              displayAddress: place.formatted_address,\r\n              name: place.name,\r\n              vicinity: place.vicinity,\r\n              locality: {},\r\n              state: {},\r\n              country: {},\r\n              geoLocation: {latitude: -1, longitude: -1},\r\n            };\r\n\r\n            if (place.geometry && place.geometry.location) {\r\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\r\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\r\n            }\r\n\r\n            place.address_components.forEach(value => {\r\n              if (value.types.indexOf('street_number') > -1) {\r\n                germanAddress.streetNumber = value.short_name;\r\n              }\r\n              if (value.types.indexOf('route') > -1) {\r\n                germanAddress.streetName = value.long_name;\r\n              }\r\n              if (value.types.indexOf('postal_code') > -1) {\r\n                germanAddress.postalCode = Number(value.short_name);\r\n              }\r\n              if (value.types.indexOf('sublocality') > -1) {\r\n                germanAddress.sublocality = value.long_name;\r\n              }\r\n              if (value.types.indexOf('locality') > -1) {\r\n                germanAddress.locality.long = value.long_name;\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\r\n                germanAddress.state.long = value.long_name;\r\n                germanAddress.state.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('country') > -1) {\r\n                germanAddress.country.long = value.long_name;\r\n                germanAddress.country.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n            });\r\n\r\n            this.onGermanAddressMapped.emit(germanAddress);\r\n\r\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\r\n              // place result is not valid\r\n              return;\r\n            } else {\r\n              // show dialog to select a address from the input\r\n              // emit failed event\r\n              this.value = place;\r\n              this.propagateChange(this.value)\r\n            }\r\n            this.address = place.formatted_address;\r\n            this.onAutocompleteSelected.emit(place);\r\n            this.onLocationSelected.emit(\r\n              {\r\n                latitude: place.geometry.location.lat(),\r\n                longitude: place.geometry.location.lng()\r\n              });\r\n          });\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (obj) {\r\n      this.value = obj;\r\n    }\r\n  }\r\n\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {FlexLayoutModule} from '@angular/flex-layout';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\r\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\r\nimport {MatGoogleMapsAutocompleteComponent} from './component/mat-google-maps-autocomplete.component';\r\n// tslint:disable-next-line:max-line-length\r\nimport {MatSearchGoogleMapsAutocompleteComponent} from './component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';\r\n\r\n\r\n@NgModule({\r\n  imports:\r\n    [\r\n      CommonModule,\r\n      FormsModule,\r\n      ReactiveFormsModule,\r\n      FlexLayoutModule,\r\n      MatInputModule,\r\n      MatIconModule\r\n    ],\r\n  exports: [\r\n    MatGoogleMapsAutocompleteComponent,\r\n    MatGoogleMapsAutocompleteDirective,\r\n    MatValidateAddressDirective,\r\n    MatSearchGoogleMapsAutocompleteComponent\r\n  ],\r\n  declarations: [\r\n    MatGoogleMapsAutocompleteComponent,\r\n    MatGoogleMapsAutocompleteDirective,\r\n    MatValidateAddressDirective,\r\n    MatSearchGoogleMapsAutocompleteComponent\r\n  ]\r\n})\r\nexport class MatGoogleMapsAutocompleteModule {\r\n}\r\n"]}