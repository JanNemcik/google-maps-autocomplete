{"version":3,"file":"angular-material-extensions-google-maps-autocomplete.js","sources":["ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/address-validator/mat-address-validator.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/helpers/parser.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/animations/index.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/mat-google-maps-autocomplete.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/mat-google-maps-autocomplete.module.ts","ng://@angular-material-extensions/google-maps-autocomplete/public-api.ts","ng://@angular-material-extensions/google-maps-autocomplete/angular-material-extensions-google-maps-autocomplete.ts"],"sourcesContent":["import {Directive, EventEmitter, forwardRef} from '@angular/core';\r\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\r\nimport PlaceResult = google.maps.places.PlaceResult;\r\n\r\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\r\n\r\n@Directive({\r\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\r\n  providers: [\r\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\r\n  ]\r\n})\r\nexport class MatValidateAddressDirective implements Validator {\r\n\r\n  public subscription: any;\r\n\r\n  private _address: PlaceResult;\r\n\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public validate(): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | any => {\r\n      return this.address ? null : {\r\n        validateAddress: {\r\n          valid: false\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  public subscribe(eventEmitter: EventEmitter<any>) {\r\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\r\n      this.address = address;\r\n    });\r\n  }\r\n\r\n  public unsubscribe() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  get address() {\r\n    return this._address;\r\n  }\r\n\r\n  set address(value) {\r\n    this._address = value;\r\n  }\r\n}\r\n","import {Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\r\nimport {MapsAPILoader} from '@agm/core';\r\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\r\nimport {Location} from '../interfaces/location.interface';\r\nimport {GermanAddress} from '../interfaces';\r\nimport PlaceResult = google.maps.places.PlaceResult;\r\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\r\n\r\nexport enum Appearance {\r\n  STANDARD = 'standard',\r\n  FILL = 'fill',\r\n  OUTLINE = 'outline',\r\n  LEGACY = 'legacy',\r\n}\r\n\r\n@Component({\r\n  selector: 'mat-google-maps-autocomplete',\r\n  exportAs: 'matGoogleMapsAutocomplete',\r\n  templateUrl: './mat-google-maps-autocomplete.component.html',\r\n  styleUrls: ['./mat-google-maps-autocomplete.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MatGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\r\n\r\n  @ViewChild('search')\r\n  public searchElementRef: ElementRef;\r\n\r\n  @Input()\r\n  addressLabelText = 'Address';\r\n\r\n  @Input()\r\n  placeholderText = 'Please enter the address';\r\n\r\n  @Input()\r\n  requiredErrorText = 'The address is required';\r\n\r\n  @Input()\r\n  invalidErrorText = 'The address is not valid';\r\n\r\n  @Input()\r\n  appearance: string | Appearance = Appearance.STANDARD;\r\n\r\n  @Input()\r\n  value: PlaceResult;\r\n\r\n  @Input()\r\n  address: PlaceResult | string;\r\n\r\n  @Input()\r\n  country: string | string[];\r\n\r\n  @Input()\r\n  placeIdOnly?: boolean;\r\n\r\n  @Input()\r\n  strictBounds?: boolean;\r\n\r\n  @Input()\r\n  types?: string[];\r\n  // types: string[] = ['address'];\r\n\r\n  @Input()\r\n  type?: string;\r\n\r\n  @Input()\r\n  autoCompleteOptions: AutocompleteOptions = {};\r\n\r\n  @Output()\r\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\r\n\r\n  @Output()\r\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\r\n\r\n  @Output()\r\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\r\n\r\n  @Output()\r\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\r\n\r\n\r\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\r\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\r\n\r\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\r\n    Validators.required,\r\n    this.addressValidator.validate()])\r\n  );\r\n\r\n  propagateChange = (_: any) => {\r\n  };\r\n\r\n  constructor(private mapsAPILoader: MapsAPILoader,\r\n              private ngZone: NgZone) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.addressValidator.subscribe(this.onNewPlaceResult);\r\n\r\n    const options: AutocompleteOptions = {\r\n      // types: ['address'],\r\n      // componentRestrictions: {country: this.country},\r\n      placeIdOnly: this.placeIdOnly,\r\n      strictBounds: this.strictBounds,\r\n      // types: this.types,\r\n      type: this.type\r\n    };\r\n\r\n    // tslint:disable-next-line:no-unused-expression\r\n    this.country ? options.componentRestrictions = {country: this.country} : null;\r\n    // tslint:disable-next-line:no-unused-expression\r\n    this.country ? options.types = this.types : null;\r\n\r\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\r\n    this.initGoogleMapsAutocomplete();\r\n  }\r\n\r\n  public initGoogleMapsAutocomplete() {\r\n    this.mapsAPILoader\r\n      .load()\r\n      .then(() => {\r\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\r\n        autocomplete.addListener('place_changed', () => {\r\n          this.ngZone.run(() => {\r\n            // get the place result\r\n            const place: PlaceResult = autocomplete.getPlace();\r\n\r\n            const germanAddress: GermanAddress = {\r\n              gmID: place.id,\r\n              icon: place.icon,\r\n              url: place.url,\r\n              placeID: place.place_id,\r\n              displayAddress: place.formatted_address,\r\n              name: place.name,\r\n              vicinity: place.vicinity,\r\n              locality: {},\r\n              state: {},\r\n              country: {},\r\n              geoLocation: {latitude: -1, longitude: -1},\r\n            };\r\n\r\n            if (place.geometry && place.geometry.location) {\r\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\r\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\r\n            }\r\n\r\n            place.address_components.forEach(value => {\r\n              if (value.types.indexOf('street_number') > -1) {\r\n                germanAddress.streetNumber = value.short_name;\r\n              }\r\n              if (value.types.indexOf('route') > -1) {\r\n                germanAddress.streetName = value.long_name;\r\n              }\r\n              if (value.types.indexOf('postal_code') > -1) {\r\n                germanAddress.postalCode = Number(value.short_name);\r\n              }\r\n              if (value.types.indexOf('sublocality') > -1) {\r\n                germanAddress.sublocality = value.long_name;\r\n              }\r\n              if (value.types.indexOf('locality') > -1) {\r\n                germanAddress.locality.long = value.long_name;\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\r\n                germanAddress.state.long = value.long_name;\r\n                germanAddress.state.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('country') > -1) {\r\n                germanAddress.country.long = value.long_name;\r\n                germanAddress.country.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n            });\r\n\r\n            this.onGermanAddressMapped.emit(germanAddress);\r\n\r\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\r\n              // place result is not valid\r\n              return;\r\n            } else {\r\n              // show dialog to select a address from the input\r\n              // emit failed event\r\n              this.value = place;\r\n              this.propagateChange(this.value)\r\n            }\r\n            this.address = place.formatted_address;\r\n            this.onAutocompleteSelected.emit(place);\r\n            // console.log('onAutocompleteSelected -> ', place);\r\n            this.onLocationSelected.emit(\r\n              {\r\n                latitude: place.geometry.location.lat(),\r\n                longitude: place.geometry.location.lng()\r\n              });\r\n          });\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  public onQuery(event: any) {\r\n    // console.log('onChange()', event);\r\n    this.onChange.emit(this.address);\r\n  }\r\n\r\n  private resetAddress() {\r\n    this.address = null;\r\n    this.addressSearchControl.updateValueAndValidity();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (obj) {\r\n      this.value = obj;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n}\r\n","import PlaceResult = google.maps.places.PlaceResult;\r\nimport {GermanAddress} from '../interfaces';\r\n\r\nexport function parseGermanAddress(placeResult: PlaceResult): GermanAddress {\r\n  const germanAddress: GermanAddress = {\r\n    gmID: placeResult.id,\r\n    icon: placeResult.icon,\r\n    url: placeResult.url,\r\n    placeID: placeResult.place_id,\r\n    displayAddress: placeResult.formatted_address,\r\n    name: placeResult.name,\r\n    vicinity: placeResult.vicinity,\r\n    locality: {},\r\n    state: {},\r\n    country: {},\r\n    geoLocation: {latitude: -1, longitude: -1},\r\n  };\r\n\r\n  if (placeResult.geometry && placeResult.geometry.location) {\r\n    germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\r\n    germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\r\n  }\r\n\r\n  if (placeResult.address_components && placeResult.address_components.length > 0) {\r\n    placeResult.address_components.forEach(value => {\r\n      if (value.types.indexOf('street_number') > -1) {\r\n        germanAddress.streetNumber = value.short_name;\r\n      }\r\n      if (value.types.indexOf('route') > -1) {\r\n        germanAddress.streetName = value.long_name;\r\n      }\r\n      if (value.types.indexOf('postal_code') > -1) {\r\n        germanAddress.postalCode = Number(value.short_name);\r\n      }\r\n      if (value.types.indexOf('sublocality') > -1) {\r\n        germanAddress.sublocality = value.long_name;\r\n      }\r\n      if (value.types.indexOf('locality') > -1) {\r\n        germanAddress.locality.long = value.long_name;\r\n        germanAddress.locality.short = value.short_name;\r\n      }\r\n      if (value.types.indexOf('administrative_area_level_1') > -1) {\r\n        germanAddress.state.long = value.long_name;\r\n        germanAddress.state.short = value.short_name;\r\n      }\r\n      if (value.types.indexOf('country') > -1) {\r\n        germanAddress.country.long = value.long_name;\r\n        germanAddress.country.short = value.short_name;\r\n      }\r\n      if (value.types.indexOf('administrative_area_level_3') > -1) {\r\n        germanAddress.locality.short = value.short_name;\r\n      }\r\n    });\r\n  }\r\n  return germanAddress;\r\n}\r\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\r\n\r\nconst customAnimation = animation(\r\n  [\r\n    style({\r\n      opacity: '{{opacity}}',\r\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\r\n    }),\r\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\r\n  ],\r\n  {\r\n    params: {\r\n      duration: '200ms',\r\n      delay: '0ms',\r\n      opacity: '0',\r\n      scale: '1',\r\n      x: '0',\r\n      y: '0',\r\n      z: '0'\r\n    }\r\n  }\r\n);\r\n\r\nexport const InputAnimations = [\r\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\r\n\r\n  trigger('animateStagger', [\r\n    state('50', style('*')),\r\n    state('100', style('*')),\r\n    state('200', style('*')),\r\n\r\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\r\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\r\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\r\n  ]),\r\n];\r\n","import {Component, EventEmitter, forwardRef, Input, OnInit, Output} from '@angular/core';\r\nimport {ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\r\n\r\nimport {parseGermanAddress} from '../../helpers/parser';\r\nimport {GermanAddress} from '../../interfaces';\r\nimport {Appearance} from '../mat-google-maps-autocomplete.component';\r\nimport {InputAnimations} from '../../animations';\r\n\r\n@Component({\r\n  selector: 'mat-search-google-maps-autocomplete',\r\n  templateUrl: './mat-search-google-maps-autocomplete.component.html',\r\n  styleUrls: ['./mat-search-google-maps-autocomplete.component.scss'],\r\n  animations: InputAnimations,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MatSearchGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\r\n\r\n  @Input()\r\n  appearance: string | Appearance = Appearance.STANDARD;\r\n\r\n  @Input()\r\n  searchAddressLabel = 'Search Address';\r\n\r\n  @Input()\r\n  streetNameLabel = 'Street';\r\n\r\n  @Input()\r\n  streetNumberLabel = 'Nr.';\r\n\r\n  @Input()\r\n  postalCodeLabel = 'PLZ';\r\n\r\n  @Input()\r\n  localityLabel = 'Locality';\r\n\r\n  @Input()\r\n  vicinityLabel = 'Vicinity';\r\n\r\n  @Input()\r\n  showVicinity: boolean;\r\n\r\n  @Input()\r\n  country: string | string[];\r\n\r\n  @Input()\r\n  placeIdOnly?: boolean;\r\n\r\n  @Input()\r\n  strictBounds?: boolean;\r\n\r\n  @Input()\r\n  types?: string[];\r\n  // types: string[] = ['address'];\r\n\r\n  @Input()\r\n  type?: string;\r\n\r\n  @Input()\r\n  readonly: boolean;\r\n\r\n  @Input()\r\n  disableSearch: boolean;\r\n\r\n  @Input()\r\n  value: GermanAddress;\r\n\r\n  @Output()\r\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\r\n\r\n  germanAddress: GermanAddress;\r\n  addressFormGroup: FormGroup;\r\n\r\n  firstInit = true;\r\n\r\n  propagateChange = (_: any) => {\r\n  };\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.createAddressFormGroup();\r\n  }\r\n\r\n  createAddressFormGroup(): void {\r\n    this.addressFormGroup = this.formBuilder.group({\r\n      streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],\r\n      streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],\r\n      postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],\r\n      vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],\r\n      locality: this.formBuilder.group({\r\n        long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],\r\n      }),\r\n    });\r\n  }\r\n\r\n  syncAutoComplete($event: google.maps.places.PlaceResult) {\r\n    if (this.germanAddress) {\r\n      this.addressFormGroup.reset();\r\n    }\r\n    const germanAddress: GermanAddress = parseGermanAddress($event);\r\n    this.germanAddress = germanAddress;\r\n    if (germanAddress.vicinity) {\r\n      this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity);\r\n    }\r\n    if (germanAddress.streetName) {\r\n      this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName);\r\n    }\r\n    if (germanAddress.streetNumber) {\r\n      this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString());\r\n    }\r\n    if (germanAddress.postalCode) {\r\n      this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode);\r\n    }\r\n    if (germanAddress.locality && germanAddress.locality.long) {\r\n      this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long);\r\n    }\r\n\r\n    this.value = germanAddress;\r\n    this.propagateChange(this.value);\r\n    this.onGermanAddressMapped.emit(germanAddress);\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    let shouldRecreateFG = false;\r\n    if (obj) {\r\n      if (!this.value && this.firstInit) {\r\n        shouldRecreateFG = true;\r\n      }\r\n      this.value = obj;\r\n      this.propagateChange(this.value);\r\n      if (shouldRecreateFG) {\r\n        this.createAddressFormGroup();\r\n        this.firstInit = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n  }\r\n\r\n}\r\n","import {Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\r\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\r\nimport {MapsAPILoader} from '@agm/core';\r\nimport {Location} from '../interfaces/location.interface';\r\nimport {isPlatformBrowser} from '@angular/common';\r\nimport {GermanAddress} from '../interfaces/germand.address.interface';\r\nimport PlaceResult = google.maps.places.PlaceResult;\r\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\r\n\r\n@Directive({\r\n  selector: '[matGoogleMapsAutocomplete]',\r\n  exportAs: 'matGoogleMapsAutocomplete',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MatGoogleMapsAutocompleteDirective implements OnInit, ControlValueAccessor {\r\n\r\n  @Input()\r\n  address: PlaceResult | string;\r\n\r\n  @Input()\r\n  country: string | string[];\r\n\r\n  @Input()\r\n  placeIdOnly?: boolean;\r\n\r\n  @Input()\r\n  strictBounds?: boolean;\r\n\r\n  @Input()\r\n  types?: string[];\r\n\r\n  @Input()\r\n  type?: string;\r\n\r\n  @Input()\r\n  autoCompleteOptions: AutocompleteOptions = {};\r\n\r\n  @Output()\r\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\r\n\r\n  @Output()\r\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\r\n\r\n  @Output()\r\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\r\n\r\n  @Output()\r\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\r\n\r\n  value: PlaceResult;\r\n\r\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\r\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\r\n\r\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\r\n    Validators.required,\r\n    this.addressValidator.validate()])\r\n  );\r\n\r\n  propagateChange = (_: any) => {\r\n  };\r\n\r\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\r\n              public elemRef: ElementRef,\r\n              public mapsAPILoader: MapsAPILoader,\r\n              private ngZone: NgZone) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.addressValidator.subscribe(this.onNewPlaceResult);\r\n      const options: AutocompleteOptions = {\r\n        // types: ['address'],\r\n        // componentRestrictions: {country: this.country},\r\n        placeIdOnly: this.placeIdOnly,\r\n        strictBounds: this.strictBounds,\r\n        // types: this.types,\r\n        type: this.type\r\n      };\r\n\r\n      // tslint:disable-next-line:no-unused-expression\r\n      this.country ? options.componentRestrictions = {country: this.country} : null;\r\n      // tslint:disable-next-line:no-unused-expression\r\n      this.country ? options.types = this.types : null;\r\n\r\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\r\n      this.initGoogleMapsAutocomplete();\r\n    }\r\n\r\n  }\r\n\r\n  public initGoogleMapsAutocomplete() {\r\n    this.mapsAPILoader\r\n      .load()\r\n      .then(() => {\r\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\r\n        autocomplete.addListener('place_changed', () => {\r\n          this.ngZone.run(() => {\r\n            // get the place result\r\n            const place: PlaceResult = autocomplete.getPlace();\r\n\r\n            const germanAddress: GermanAddress = {\r\n              gmID: place.id,\r\n              icon: place.icon,\r\n              url: place.url,\r\n              placeID: place.place_id,\r\n              displayAddress: place.formatted_address,\r\n              name: place.name,\r\n              vicinity: place.vicinity,\r\n              locality: {},\r\n              state: {},\r\n              country: {},\r\n              geoLocation: {latitude: -1, longitude: -1},\r\n            };\r\n\r\n            if (place.geometry && place.geometry.location) {\r\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\r\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\r\n            }\r\n\r\n            place.address_components.forEach(value => {\r\n              if (value.types.indexOf('street_number') > -1) {\r\n                germanAddress.streetNumber = value.short_name;\r\n              }\r\n              if (value.types.indexOf('route') > -1) {\r\n                germanAddress.streetName = value.long_name;\r\n              }\r\n              if (value.types.indexOf('postal_code') > -1) {\r\n                germanAddress.postalCode = Number(value.short_name);\r\n              }\r\n              if (value.types.indexOf('sublocality') > -1) {\r\n                germanAddress.sublocality = value.long_name;\r\n              }\r\n              if (value.types.indexOf('locality') > -1) {\r\n                germanAddress.locality.long = value.long_name;\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\r\n                germanAddress.state.long = value.long_name;\r\n                germanAddress.state.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('country') > -1) {\r\n                germanAddress.country.long = value.long_name;\r\n                germanAddress.country.short = value.short_name;\r\n              }\r\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\r\n                germanAddress.locality.short = value.short_name;\r\n              }\r\n            });\r\n\r\n            this.onGermanAddressMapped.emit(germanAddress);\r\n\r\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\r\n              // place result is not valid\r\n              return;\r\n            } else {\r\n              // show dialog to select a address from the input\r\n              // emit failed event\r\n              this.value = place;\r\n              this.propagateChange(this.value)\r\n            }\r\n            this.address = place.formatted_address;\r\n            this.onAutocompleteSelected.emit(place);\r\n            this.onLocationSelected.emit(\r\n              {\r\n                latitude: place.geometry.location.lat(),\r\n                longitude: place.geometry.location.lng()\r\n              });\r\n          });\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (obj) {\r\n      this.value = obj;\r\n    }\r\n  }\r\n\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {FlexLayoutModule} from '@angular/flex-layout';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\r\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\r\nimport {MatGoogleMapsAutocompleteComponent} from './component/mat-google-maps-autocomplete.component';\r\n// tslint:disable-next-line:max-line-length\r\nimport {MatSearchGoogleMapsAutocompleteComponent} from './component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';\r\n\r\n\r\n@NgModule({\r\n  imports:\r\n    [\r\n      CommonModule,\r\n      FormsModule,\r\n      ReactiveFormsModule,\r\n      FlexLayoutModule,\r\n      MatInputModule,\r\n      MatIconModule\r\n    ],\r\n  exports: [\r\n    MatGoogleMapsAutocompleteComponent,\r\n    MatGoogleMapsAutocompleteDirective,\r\n    MatValidateAddressDirective,\r\n    MatSearchGoogleMapsAutocompleteComponent\r\n  ],\r\n  declarations: [\r\n    MatGoogleMapsAutocompleteComponent,\r\n    MatGoogleMapsAutocompleteDirective,\r\n    MatValidateAddressDirective,\r\n    MatSearchGoogleMapsAutocompleteComponent\r\n  ]\r\n})\r\nexport class MatGoogleMapsAutocompleteModule {\r\n}\r\n","/*\r\n * Public API Surface of google-maps-autocomplete\r\n */\r\n\r\nexport * from './lib/interfaces';\r\nexport * from './lib/component';\r\nexport * from './lib/directives/mat-google-maps-autocomplete.directive';\r\nexport * from './lib/directives/address-validator/mat-address-validator.directive';\r\nexport * from './lib/mat-google-maps-autocomplete.module';\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {InputAnimations as Éµc} from './lib/animations';\nexport {MatGoogleMapsAutocompleteComponent as Éµa} from './lib/component/mat-google-maps-autocomplete.component';\nexport {MatSearchGoogleMapsAutocompleteComponent as Éµb} from './lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';"],"names":[],"mappings":"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"}